{"version":3,"sources":["components/Form.js","components/Nav.js","components/Header.js","components/Welcome.js","components/GalleryItem.js","components/Gallery.js","components/Error.js","config.js","App.js","serviceWorker.js","index.js"],"names":["Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","e","setState","target","value","query","props","searchFunc","_this2","react_default","a","createElement","onClick","performSearch","type","className","fill","height","viewBox","width","xmlns","d","_this3","Fragment","name","placeholder","onChange","updateInputValue","Link","to","concat","buttonData","preventDefault","React","Component","Nav","Header","components_Form","components_Nav","Welcome","GalleryItem","src","farmID","serverID","ID","secret","alt","Gallery","dataLoading","undefined","data","isLoading","pictures","title","searchTag","charAt","toUpperCase","slice","length","map","picture","index","components_GalleryItem","farm","server","id","key","Error","window","location","apiKey","App","resetLoadState","fetchDynamicData","fetch","then","res","json","jsonData","photos","photo","catch","err","console","log","fetchStaticData","Promise","all","response","staticPics","cats","dogs","birds","pathname","includes","BrowserRouter","components_Header","Switch","Route","exact","path","component","components_Gallery","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.caf3fb96.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nclass Form extends React.Component {\n    constructor(){\n        super();\n        // Initialise state\n        this.state = {\n            inputValue: ''\n        }\n    }\n    \n    // Function to update state's inputValue\n    updateInputValue (e) {\n        this.setState({\n            inputValue: e.target.value,\n            \n        })\n    }\n\n    // Function to fetch query using App's fetchDynamicData function\n    performSearch (query) {\n        // Make sure user has actually provided a search term\n        if(this.state.inputValue !== \"\"){\n        // Reset state which will also reset form input's value \n        this.setState({\n            inputValue: ''\n        })\n        this.props.searchFunc(query)\n        }\n    }\n\n    buttonData () {\n        return (\n        /* Perform search when form search button is clicked, passing in input value */\n        <button onClick={() => this.performSearch(this.state.inputValue)} type=\"submit\" className=\"search-button\">\n        <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        </svg>\n    </button>\n        )\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <form className=\"search-form\">\n                    {/* Update state's input value when value of input changes */}\n                    <input value={this.state.inputValue} type=\"search\" name=\"search\" placeholder=\"Search\" onChange={e => this.updateInputValue(e)}/>\n                    {/* Link to dynamic search route \n                        Render disabled link if input is yet to be entered */}\n                    {this.state.inputValue !== \"\"\n                    ?\n                    <Link to={`/search=${this.state.inputValue}`}>{this.buttonData()}</Link>\n                    :\n                    <Link to={`/search=${this.state.inputValue}`} className=\"disabled\" onClick={ (e) => e.preventDefault() }>{this.buttonData()}</Link>\n                    }\n                </form>\n            </React.Fragment>        \n        );\n    }\n}\n\nexport default Form;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Nav = () => { \n    return (\n        // Create Links\n        <nav className= \"main-nav\">\n            <ul>\n                <Link to=\"/cats\">Cats</Link>\n                <Link to=\"/dogs\">Dogs</Link>\n                <Link to=\"/birds\">Birds</Link>                \n            </ul>\n\n        </nav>\n    )\n\n}\n\nexport default Nav;","import React from 'react';\nimport Form from './Form';\nimport Nav from './Nav';\n\nconst Header = (props) => {\n    return (\n        <div>\n            <Form searchFunc={props.searchFunc}></Form>\n            <Nav searchFunc={props.searchFunc}></Nav>\n        </div>       \n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Welcome = () => {\n    return (\n        <div>\n            <h1>Welcome!</h1> \n            <p>Please select one of the links or search for your favourite pictures...</p>\n        </div>\n    );  \n}\nexport default Welcome;","import React from 'react';\n\nconst GalleryItem = (props) => {\n    return (\n        <li>\n            <img src={`https://farm${props.farmID}.staticflickr.com/${props.serverID}/${props.ID}_${props.secret}.jpg`} alt=\"\"></img>    \n        </li>\n    )\n}\n\nexport default GalleryItem;","import React from 'react';\nimport GalleryItem from './GalleryItem';\n\nconst Gallery = (props) => {\n    // Check if passed data has loaded\n    const dataLoading = (props.data.isLoading !== undefined && props.data.isLoading);\n    let data = props.data.pictures;\n\n    // Create title to display\n    let title = `${props.data.searchTag.charAt(0).toUpperCase() + props.data.searchTag.slice(1)}`;\n\n   /*  Add 'Pics' on the end of title only if there is data to show. \n       Otherwise if no pictures were returned, message would state\n       '*search* Pics did not return any results......' */\n    if(data.length !== 0) {\n        title += ' Pics'\n    }\n\n    // Iterate through data to create all Gallery Items\n    let pictures = props.data.pictures.map((picture, index) =>\n    <GalleryItem\n    // Pass in required data\n        farmID={picture.farm}\n        serverID={picture.server}\n        ID={picture.id}\n        secret={picture.secret}\n        key={index}\n    />\n    )\n\n    return(    \n        <div className=\"photo-container\">\n            {/* If data is still loading, display 'Loading...' */}\n            {dataLoading\n            ?\n                <p>Loading...</p>\n            :\n                // If search returned pictures, setup list to display previously created Gallery Items\n                data.length > 0 \n                ?\n                    <div className=\"photo-container\">\n                        <h1>{title}</h1>\n                        <ul>\n                            {pictures}\n                        </ul>\n                    </div>\n                :\n                    // Otherwise display message of no results\n                    <div>\n                        <h1>No results found</h1>\n                        <p>{title} did not return any results, please try again.</p>\n                    </div>\n            }\n        </div>\n        \n        \n\n    )\n}\n    \n\n    \n\nexport default Gallery;","import React from 'react';\n\nconst Error = () => {\n    return (\n        <div>\n            <h1>Error! '<span className=\"errorLink\">{`${window.location}`}</span>' is not recognised!</h1>\n            <p>Please select a link or search for pictures.</p>\n        </div>\n    )\n}\n\nexport default Error;","const apiKey = '4132f16750d98c707ac2f53c71a082ed';\n\nexport default apiKey;","import React, { Component } from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport './App.css';\n\n//Styles\nimport \"./css/index.css\"\n\n//Components\nimport Header from './components/Header';\nimport Welcome from './components/Welcome';\nimport Gallery from './components/Gallery';\nimport Error from './components/Error';\n\n// Api Key\nimport key from './config.js';\n\nclass App extends Component {\n\n  constructor () {\n    super();\n    \n    // Initialise state\n    this.state = {\n      pictures: [],\n      searchTag: '',\n      isLoading: true\n    }\n\n    // Initialise static pictures object to fill in later\n    this.staticPics = {\n      pictures : {\n        cats: {\n          pictures: [],\n          searchTag: 'cats',\n          isLoading: true\n        },\n        dogs: {\n          pictures: [],\n          searchTag: 'dogs',\n          isLoading: true\n        },\n        birds: {\n          pictures: [],\n          searchTag: 'birds',\n          isLoading: true\n        },\n      }\n    }\n  }\n\n  // Reset state function\n  resetLoadState = () => {\n    this.setState({\n      pictures: [],\n      searchTag: '',\n      isLoading: true\n    })\n  }\n\n  fetchDynamicData = (query) => {\n    // Reset state so Components aren't loaded with wrong/incomplete data\n    this.resetLoadState();\n    fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${key}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n    .then(res => res.json())\n    .then(jsonData => {\n      this.setState({\n        pictures: jsonData.photos.photo,\n        searchTag: query,\n        isLoading: false\n      })        \n    })\n    .catch(err => {\n      console.log('Error retrieving data', err);\n    })\n  }\n\n  // Function to fetch default static data (cats, dogs, birds) and update staticPics object\n  fetchStaticData = () => {\n    Promise.all([\n      fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${key}&tags=cats&per_page=24&format=json&nojsoncallback=1`),\n      fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${key}&tags=dogs&per_page=24&format=json&nojsoncallback=1`),\n      fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${key}&tags=birds&per_page=24&format=json&nojsoncallback=1`)\n    ])\n    .then(res => {\n      Promise.all(res.map(response => response.json())\n      )\n      .then(jsonData => {\n        this.staticPics.pictures.cats.pictures = jsonData[0].photos.photo\n        this.staticPics.pictures.cats.isLoading = false\n\n        this.staticPics.pictures.dogs.pictures = jsonData[1].photos.photo\n        this.staticPics.pictures.dogs.isLoading = false\n\n        this.staticPics.pictures.birds.pictures = jsonData[2].photos.photo\n        this.staticPics.pictures.birds.isLoading = false\n\n        this.setState({\n            isLoading: false\n          }) \n      })\n    })\n    .catch(err => {\n      console.log('Oopsie Woopsie', err)\n    })\n  }\n  \n  componentDidMount() {\n    this.fetchStaticData()\n\n    // Fetch dynamic data again if user refreshes page on search route.\n    if(window.location.pathname.includes('search') && this.state.searchTag === ''){\n      this.fetchDynamicData(window.location.pathname.slice(8))\n    }\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container\">      \n          <Header searchFunc={this.fetchDynamicData}></Header>\n          {/* Router switch for handling unknown routes */}\n          <Switch>\n            <Route exact path=\"/\" component={Welcome}></Route>\n            <Route exact path=\"/cats\" component={() => <Gallery data={this.staticPics.pictures.cats}></Gallery>}></Route>         \n            <Route exact path=\"/dogs\" component={() => <Gallery data={this.staticPics.pictures.dogs}></Gallery>}></Route>\n            <Route exact path=\"/birds\" component={() => <Gallery data={this.staticPics.pictures.birds}></Gallery>}></Route>\n            <Route path=\"/search=:query\" component={() => <Gallery data={this.state}></Gallery>}></Route>\n            <Route component={Error}/>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}